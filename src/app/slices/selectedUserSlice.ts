import {
  createAsyncThunk,
  createSlice,
  // PayloadAction,
} from "@reduxjs/toolkit";
import { IUser } from "../../interfaces";
import {
  RootState,
  //  AppThunk
} from "../store";
import { toast } from "react-toastify";
import {
  
  getFriendsByUserIdParams,
  getUserByUsernameQuery,
} from "../../api/users.api";
import { signoutAsync } from "./authSlice";

const position = {
  position: toast.POSITION.BOTTOM_RIGHT,
};

export interface SelectedUserState {
  selectedUser?: IUser;
  
  friendsOfSelectedUser: IUser[];
  isFetching: boolean;
  error: any;
}

const initialState: SelectedUserState = {
  selectedUser: undefined,
  
  friendsOfSelectedUser: [],
  isFetching: false,
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const setSelectedUserAsync = createAsyncThunk(
  "selectedUser/setSelectedUserAsync",
  async (username?: string) => {
    if (!!username) {
      const res = await getUserByUsernameQuery(username);
      const selectedUser: IUser = res.data._doc;

      return selectedUser;
    }else return false
  },
);

export const getFriendsOfSelectedUserAsync =
  createAsyncThunk(
    "selectedUser/getFriendsOfSelectedUserAsync",
    async (selectedUserId: string) => {
      const response = await getFriendsByUserIdParams(
        selectedUserId,
      );
      // The value we return becomes the `fulfilled` action payload
      const friendsOfSelectedUser: IUser[] = response.data;

      return friendsOfSelectedUser;
    },
  );



export const selectedUserSlice = createSlice({
  name: "selectedUser",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setSelectedUserAsync.pending, (state) => {
        state.isFetching = true;
      })
      .addCase(
        setSelectedUserAsync.fulfilled,
        (state, action) => {
          state.isFetching = false;
          if (!!action.payload) {
            state.selectedUser = action.payload;
          } else {
            state.selectedUser = undefined
          }
        },
      )
      .addCase(
        setSelectedUserAsync.rejected,
        (state, action) => {
          state.isFetching = false;
          toast(action.error.message, position);
        },
      )
      .addCase(
        getFriendsOfSelectedUserAsync.pending,
        (state) => {
          state.isFetching = true;
        },
      )
      .addCase(
        getFriendsOfSelectedUserAsync.fulfilled,
        (state, action) => {
          state.isFetching = false;
          if (!!action.payload) {
            state.friendsOfSelectedUser = action.payload;
          }
        },
      )
      
      
      
      
      
      
      .addCase(signoutAsync.fulfilled, (state) => {
        state.selectedUser = undefined;
        state.friendsOfSelectedUser = [];
        state.isFetching = false;
        state.error = null;
      });
  },
});

// export const { } = currentUsersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSelectedUserAndRelatives = (
  state: RootState,
) => state.selectedUserAndRelatives;
export const selectSelectedUser = (state: RootState) =>
  state.selectedUserAndRelatives.selectedUser;

export const selectFriendsOfSelectedUser = (
  state: RootState,
) => state.selectedUserAndRelatives.friendsOfSelectedUser;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default selectedUserSlice.reducer;
