import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { IPost } from "../../interfaces";
import {
  RootState,
} from "../store";

import { toast } from "react-toastify";
import {
  searchUsersByUsernamePartParams,
} from "../../api/users.api";
import {
  selectFollowedByCurrentUser,
} from "./currentUserSlice";

const position = {
  position: toast.POSITION.BOTTOM_RIGHT,
};
export interface SearchedUser {
  _id: string;
  username: string;
  profilePicture?: string;
  followed?: boolean;
}

export interface SearchState {
  searchs: string[];
  users: SearchedUser[];
  posts: IPost[];
  isFetching: boolean;
}

const initialState: SearchState = {
  searchs: [],
  users: [],
  posts: [],
  isFetching: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const searchUsersByUserNamePartAsync =
  createAsyncThunk<
    SearchedUser[],
    {
      usernamePart: string;
    },
    { state: RootState }
  >(
    "search/searchUsers",
    async (
      props: {
        usernamePart: string;
      },
      { getState },
    ) => {
      const { usernamePart } = props;
      const followedByCurrentUser =
        selectFollowedByCurrentUser(getState());
      const followedByCurrentUserIds =
        followedByCurrentUser.map((f) => f._id!);
      const res = await searchUsersByUsernamePartParams(
        usernamePart,
      );
      const users: SearchedUser[] = res.data;
      const compUsers: SearchedUser[] = users.map((u) => ({
        ...u,
        followed: !!followedByCurrentUserIds?.includes(
          u._id!,
        ),
      }));
      return compUsers;
    },
  );



export const searchSlice = createSlice({
  name: "search",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleFollowed: (
      state,
      action: PayloadAction<string>,
    ) => {
      state.users = state.users.map((user) => ({
        ...user,
        followed:
          user._id === action.payload
            ? !user.followed
            : !!user.followed,
      }));
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(
        searchUsersByUserNamePartAsync.pending,
        (state) => {
          state.isFetching = true;
        },
      )
      .addCase(
        searchUsersByUserNamePartAsync.fulfilled,
        (state, action) => {
          state.isFetching = false;
          if (!!action.payload) {
            state.users = action.payload;
          } else {
            state.users = [];
          }
        },
      )
      .addCase(
        searchUsersByUserNamePartAsync.rejected,
        (state, action) => {
          console.log(action);

          state.isFetching = false;
          state.users = [];
          toast(action.error.message, position);
        },
      );
  },
});

export const { toggleFollowed } = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectSearchUsers = (state: RootState) =>
  state.search.users;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default searchSlice.reducer;
